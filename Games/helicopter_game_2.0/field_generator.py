import random
import settings


class FieldGenerator:
    def __init__(self, width, height):
        self.width = width
        self.height = height

    def create_field(self):
        """
        –°–æ–∑–¥–∞—ë—Ç –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞, –∑–∞–ø–æ–ª–Ω—è—è –µ–≥–æ –¥–µ—Ä–µ–≤—å—è–º–∏.
        :return: –¥–≤—É–º–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
        """
        return [["üå≥" for _ in range(self.width)] for _ in range(self.height)]

    
    def generate_lake(self, field):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–∑–µ—Ä–æ –≤ –≤–∏–¥–µ –∫–≤–∞–¥—Ä–∞—Ç–∞ 2x2 –∏–∑ –∫–∞–ø–µ–ª—å –≤–æ–¥—ã.
        :param field: –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
        :return: –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–µ—Ä—Ö–Ω–µ–≥–æ –ª–µ–≤–æ–≥–æ —É–≥–ª–∞ –æ–∑–µ—Ä–∞ (start_row, start_col)
        """
        rows, cols = len(field), len(field[0])
        while True:
            start_row = random.randint(0, rows - 2)
            start_col = random.randint(0, cols - 2)
            if all(field[start_row + i][start_col + j] == "üå≥" for i in range(2) for j in range(2)):
                for i in range(2):
                    for j in range(2):
                        field[start_row + i][start_col + j] = "üíß"
                return start_row, start_col

    def generate_river(self, field, start_row, start_col):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫—É, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∏–∑ –æ–∑–µ—Ä–∞ –∏ –∑–∞–Ω–∏–º–∞–µ—Ç 30% –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è.
        :param field: –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
        :param start_row: –Ω–∞—á–∞–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ (–∏–∑ –æ–∑–µ—Ä–∞)
        :param start_col: –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü (–∏–∑ –æ–∑–µ—Ä–∞)
        """
        rows, cols = len(field), len(field[0])
        total_cells = rows * cols
        river_length_target = int(0.3 * total_cells)  # 30% –æ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª–µ—Ç–æ–∫
        x, y = start_row, start_col
        direction = random.choice(["up", "down", "left", "right"])
        river_length = 0

        while river_length < river_length_target and 0 <= x < rows and 0 <= y < cols:
            if field[x][y] == "üå≥":
                field[x][y] = "üíß"
                river_length += 1

            if random.random() < 0.2:  # 20% —à–∞–Ω—Å –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                direction = random.choice(["up", "down", "left", "right"])

            if direction == "up" and x > 0:
                x -= 1
            elif direction == "down" and x < rows - 1:
                x += 1
            elif direction == "left" and y > 0:
                y -= 1
            elif direction == "right" and y < cols - 1:
                y += 1
            else:
                direction = random.choice(["up", "down", "left", "right"])

        if river_length < river_length_target:
            print("‚ùå –û—à–∏–±–∫–∞: —Ä–µ–∫–∞ –Ω–µ –¥–æ—Å—Ç–∏–≥–ª–∞ —Ü–µ–ª–µ–≤–æ–π –¥–ª–∏–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –ø–æ–ª—è.")

    def generate_fire(self, field, burning_trees, burned_trees):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–µ –ø–æ–∂–∞—Ä—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–æ—Ä—è—â–∏—Ö –¥–µ—Ä–µ–≤—å–µ–≤.
        :param field: –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
        :param burning_trees: —Å–ª–æ–≤–∞—Ä—å —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –≥–æ—Ä—è—â–∏—Ö –¥–µ—Ä–µ–≤—å–µ–≤ –∏ –∏—Ö –≤—Ä–µ–º–µ–Ω–µ–º –≥–æ—Ä–µ–Ω–∏—è
        :param burned_trees: —Å—á—ë—Ç—á–∏–∫ —Å–≥–æ—Ä–µ–≤—à–∏—Ö –¥–µ—Ä–µ–≤—å–µ–≤
        :return: –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å—á—ë—Ç—á–∏–∫ —Å–≥–æ—Ä–µ–≤—à–∏—Ö –¥–µ—Ä–µ–≤—å–µ–≤
        """
        rows, cols = len(field), len(field[0])

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–æ—Ä—è—â–∏—Ö –¥–µ—Ä–µ–≤—å–µ–≤
        for (row, col), time_left in list(burning_trees.items()):
            if time_left > 1:
                burning_trees[(row, col)] -= 1  # –£–º–µ–Ω—å—à–∞–µ–º –≤—Ä–µ–º—è –≥–æ—Ä–µ–Ω–∏—è
            else:
                del burning_trees[(row, col)]  # –£–¥–∞–ª—è–µ–º –¥–µ—Ä–µ–≤–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –≥–æ—Ä—è—â–∏—Ö
                burned_trees += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ —Å–≥–æ—Ä–µ–≤—à–∏—Ö –¥–µ—Ä–µ–≤—å–µ–≤
                field[row][col] = "üî∫"  # –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ –∫—É—á–∫—É –ø–µ–ø–ª–∞

        # –ü–æ–¥–∂–∏–≥–∞–µ–º –Ω–æ–≤—ã–µ –¥–µ—Ä–µ–≤—å—è
        for row in range(rows):
            for col in range(cols):
                if field[row][col] == "üå≥" and random.random() < 0.01:  # 1% —à–∞–Ω—Å –ø–æ–¥–∂–µ—á—å –¥–µ—Ä–µ–≤–æ
                    field[row][col] = "üî•"
                    burning_trees[(row, col)] = settings.SET_BUR_TREE  # –ù–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≥–æ—Ä–µ–Ω–∏—è ‚Äî n —Ö–æ–¥–æ–≤

        return burned_trees

    def generate_thunderclouds(self, field, thunderclouds_dict):
            """
            –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç 1‚Äì2 –≥—Ä–æ–∑–æ–≤—ã—Ö –æ–±–ª–∞–∫–∞ –Ω–∞ –ø–æ–ª–µ.
            :param field: –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
            :param thunderclouds_dict: —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± –æ–±–ª–∞–∫–∞—Ö
            """
            rows, cols = len(field), len(field[0])
            num_clouds = random.randint(1, 2)
            for _ in range(num_clouds):
                while True:
                    row, col = random.randint(0, rows - 1), random.randint(0, cols - 1)
                    if field[row][col] in ["üå≥", "üíß"]:  # –ú–æ–∂–Ω–æ —Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ –¥–µ—Ä–µ–≤–æ –∏–ª–∏ –≤–æ–¥—É
                        original = field[row][col]
                        field[row][col] = "üå©Ô∏è"
                        thunderclouds_dict[(row, col)] = {
                            "original_symbol": original,
                            "time_left": random.randint(10, 20)  # –û–±–ª–∞–∫–æ –∏—Å—á–µ–∑–Ω–µ—Ç —á–µ—Ä–µ–∑ 10‚Äì20 —Ç–∏–∫–æ–≤
                        }
                        break

    def spawn_thundercloud(self, field, thunderclouds_dict):
        rows, cols = len(field), len(field[0])
        suitable_cells = [
            (r, c) for r in range(rows) for c in range(cols)
            if field[r][c] in ["üå≥", "üíß"] and (r, c) not in thunderclouds_dict
        ]
        if suitable_cells:
            row, col = random.choice(suitable_cells)
            original = field[row][col]
            field[row][col] = "üå©Ô∏è"
            thunderclouds_dict[(row, col)] = {
                "original_symbol": original,
                "time_left": random.randint(10, 20)
            }

    def generate_field(self):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω–æ–µ –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ —Å —Ä–µ–∫–∞–º–∏, –æ–∑–µ—Ä–æ–º, –¥–µ—Ä–µ–≤—å—è–º–∏, –≥–æ—Å–ø–∏—Ç–∞–ª–µ–º –∏ –º–∞–≥–∞–∑–∏–Ω–æ–º.
        :return: –≥–æ—Ç–æ–≤–æ–µ –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
        """
        field = self.create_field()
        lake_start_row, lake_start_col = self.generate_lake(field)
        self.generate_river(field, lake_start_row, lake_start_col)
        self.place_objects(field, ["üè•", "üõí"])  # –ì–æ—Å–ø–∏—Ç–∞–ª—å –∏ –º–∞–≥–∞–∑–∏–Ω
        return field

    @staticmethod
    def place_objects(field, objects):
        """
        –†–∞–∑–º–µ—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≥–æ—Å–ø–∏—Ç–∞–ª—å –∏–ª–∏ –º–∞–≥–∞–∑–∏–Ω) –≤ —Å–ª—É—á–∞–π–Ω—ã—Ö –ø—É—Å—Ç—ã—Ö –∫–ª–µ—Ç–∫–∞—Ö.
        :param field: –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
        :param objects: —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, ["üè•", "üõí"])
        """
        rows, cols = len(field), len(field[0])
        for obj_symbol in objects:
            while True:
                row, col = random.randint(0, rows - 1), random.randint(0, cols - 1)
                if field[row][col] == "üå≥":
                    field[row][col] = obj_symbol
                    break